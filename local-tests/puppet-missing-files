#!/usr/bin/env python3
"""Test puppet sourced files and templates for existence."""

import os.path,re
import subprocess
import sys

def main(module_paths):
    """The main flow."""
    owd = os.getcwd()
    for path in module_paths:
        os.chdir(path)
        manifests = get_manifests()
        paths = get_paths(manifests)
        check_paths(paths)
        os.chdir(owd)

def check_paths(paths):

    retval = 0
    """Check the set of paths for existence (or symlinked existence)."""
    for path in paths:
        if not os.path.exists(path) and not os.path.islink(path):
            print("%s does not exist." % format(path))
            retval = 1

    if retval == 1:
        sys.exit('Files missing - Fatal Error')
    else:
        print('No missing files - test PASSED')
        sys.exit(0)

def get_manifests():
    """Find all .pp files in the current working directory and subfolders."""

    try:
        manifests = subprocess.check_output(["find", ".", "-type", "f",
                                             "-name", "*.pp"])
    except subprocess.CalledProcessError as error:
        sys.exit(1, error)

    manifests = manifests.strip().splitlines()
    return manifests

def get_paths(manifests):
    """Extract and construct paths to check."""

    paths = set()

    for line in manifests:
        try:
            results = subprocess.check_output(["grep", "puppet:\/", line])
        # we don't care if grep does not find any matches in a file
        except subprocess.CalledProcessError:
            pass
        else:
            hits = results.splitlines()

            for hit in hits:
                working_copy = hit.strip()
                # Exclude files with variables and things that aren't files
                if re.search('\${?',working_copy):
                    continue
                if re.search('<%=',working_copy):
                    continue
                if re.search('class puppet',working_copy):
                    continue
                quotesplit = re.compile("puppet://(.*)['\"]")
                working_copy = quotesplit.split(working_copy)
                if len(working_copy) > 1:
                    working_copy = working_copy[1]
                else:
                    working_copy = working_copy[0]
                working_copy = working_copy.replace("puppet://", ".")

                segments = working_copy.split("/", 3)
                del segments[1]

                # If this is just a module by itself, we need to delete differently
                if len(sys.argv) == 1:
                    segments.insert(2, 'files')
                else:
                    if sys.argv[1] == 'module':
                        del segments[1]
                        segments.insert(1,'files')
                    else:
                        segments.insert(2, 'files')
                path = "/".join(segments)
                paths.add('.'+path)

        try:
            results = subprocess.check_output(["grep", "template(", line])
        # we don't care if grep does not find any matches in a file
        except subprocess.CalledProcessError:
            pass
        else:
            hits = results.splitlines()

            for hit in hits:
                working_copy = hit.strip()
                if re.search('\${?',working_copy):
                    continue
                if re.search('<%=',working_copy):
                    continue
                quotesplit = re.compile("[\"']")
                working_copy = quotesplit.split(working_copy)
                if len(working_copy) > 1:
                    working_copy = working_copy[1]
                else:
                    working_copy = working_copy[0]
                segments = working_copy.split("/", 1)
                
                # If it's a solo module this needs to be handled differently
                if len(sys.argv) == 1:
                    segments.insert(0, ".")
                    segments.insert(2, "templates")
                else:
                    if sys.argv[1] == 'module':
                        del segments[0]
                        segments.insert(0, ".")
                        segments.insert(0, "templates")
                    else:
                        segments.insert(0, ".")
                        segments.insert(2, "templates")
                
                path = "/".join(segments)
                paths.add(path)

    return paths

if __name__ == "__main__":
    main(sys.argv[1:])